using System;
using Unmanaged;

namespace Worlds
{
    public readonly struct Entity<{{GenericTypeArguments}}> : IEntity, IEquatable<Entity<{{GenericTypeArguments}}>> {{TypeConstraints}}
    {
        private readonly Entity entity;

        readonly World IEntity.World => entity.world;
        readonly uint IEntity.Value => entity.value;

        readonly void IEntity.Describe(ref Archetype archetype)
        {
{{DescribeEntity}}
        }

        public Entity(World world, uint existingEntity)
        {
            entity = new(world, existingEntity);
        }

        public Entity(World world)
        {
            entity = new(world, world.CreateEntity({{DefaultTypes}}));
        }

        public Entity(World world, {{TypeParametersSignature}})
        {
            entity = new(world, world.CreateEntity({{TypeParameters}}));
        }

        public readonly void Dispose()
        {
            entity.Dispose();
        }

        public readonly override string ToString()
        {
            return entity.ToString();
        }

        public readonly uint ToString(USpan<char> buffer)
        {
            return entity.ToString(buffer);
        }

        public readonly override int GetHashCode()
        {
            return entity.GetHashCode();
        }

        public readonly override bool Equals(object? obj)
        {
            return obj is Entity<{{GenericTypeArguments}}> other && Equals(other);
        }

        public readonly bool Equals(Entity<{{GenericTypeArguments}}> other)
        {
            return entity.Equals(other.entity);
        }

        public static bool operator ==(Entity<{{GenericTypeArguments}}> left, Entity<{{GenericTypeArguments}}> right)
        {
            return left.Equals(right);
        }

        public static bool operator !=(Entity<{{GenericTypeArguments}}> left, Entity<{{GenericTypeArguments}}> right)
        {
            return !left.Equals(right);
        }

        public static implicit operator Entity(Entity<{{GenericTypeArguments}}> entity)
        {
            return entity.entity;
        }
    }
}